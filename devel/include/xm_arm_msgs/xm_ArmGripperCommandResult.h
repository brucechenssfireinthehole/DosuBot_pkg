// Generated by gencpp from file xm_arm_msgs/xm_ArmGripperCommandResult.msg
// DO NOT EDIT!


#ifndef XM_ARM_MSGS_MESSAGE_XM_ARMGRIPPERCOMMANDRESULT_H
#define XM_ARM_MSGS_MESSAGE_XM_ARMGRIPPERCOMMANDRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace xm_arm_msgs
{
template <class ContainerAllocator>
struct xm_ArmGripperCommandResult_
{
  typedef xm_ArmGripperCommandResult_<ContainerAllocator> Type;

  xm_ArmGripperCommandResult_()
    : finish(false)  {
    }
  xm_ArmGripperCommandResult_(const ContainerAllocator& _alloc)
    : finish(false)  {
  (void)_alloc;
    }



   typedef uint8_t _finish_type;
  _finish_type finish;





  typedef boost::shared_ptr< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> const> ConstPtr;

}; // struct xm_ArmGripperCommandResult_

typedef ::xm_arm_msgs::xm_ArmGripperCommandResult_<std::allocator<void> > xm_ArmGripperCommandResult;

typedef boost::shared_ptr< ::xm_arm_msgs::xm_ArmGripperCommandResult > xm_ArmGripperCommandResultPtr;
typedef boost::shared_ptr< ::xm_arm_msgs::xm_ArmGripperCommandResult const> xm_ArmGripperCommandResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace xm_arm_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'xm_arm_msgs': ['/home/brucechen/dosubot_ws/src/xm_arm_msgs/msg', '/home/brucechen/dosubot_ws/devel/share/xm_arm_msgs/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "474a58dbb494a45bb1ca99544cd64e45";
  }

  static const char* value(const ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x474a58dbb494a45bULL;
  static const uint64_t static_value2 = 0xb1ca99544cd64e45ULL;
};

template<class ContainerAllocator>
struct DataType< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xm_arm_msgs/xm_ArmGripperCommandResult";
  }

  static const char* value(const ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Result\n\
bool finish\n\
";
  }

  static const char* value(const ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.finish);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct xm_ArmGripperCommandResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xm_arm_msgs::xm_ArmGripperCommandResult_<ContainerAllocator>& v)
  {
    s << indent << "finish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.finish);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XM_ARM_MSGS_MESSAGE_XM_ARMGRIPPERCOMMANDRESULT_H
